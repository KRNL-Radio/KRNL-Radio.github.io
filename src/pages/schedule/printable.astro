---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Schedule } from "../../util/scheduleParser";

const last_updated = new Date().toLocaleDateString("en-US");
const shows = await getCollection("shows");

// sort shows by day
const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

const showsDict: { [key: string]: { name: string; hosts: string[]; time: string }[] } = Object.fromEntries(daysOfWeek.map(day => [day, []]));

shows.forEach(show => {
  const sched = new Schedule(show.data.schedule)
  const nextOccurance = sched.getStartOfNextOccurance()
  if (!nextOccurance) return;
  const day = nextOccurance.toLocaleDateString("en-US", { weekday: "long" });
  showsDict[day].push({
    name: show.data.name,
    hosts: show.data.hosts,
    time: sched.toTimeString(),
  });
});

// Function to generate HTML table with days of week as columns
function generateScheduleTable(schedule: typeof showsDict  ) {
  let tableHTML = '<tr>';

  // Find the maximum number of shows for any day to determine the row count
  const maxShows = Math.max(...daysOfWeek.map(day => schedule[day] ? schedule[day].length : 0));

  // Loop through each show index
  for (let i = 0; i < maxShows; i++) {
    tableHTML += '<tr>';
    daysOfWeek.forEach(day => {
      if (schedule[day] && schedule[day][i]) {
        const show = schedule[day][i];
        tableHTML += `<td class="border p-2">${show.name}<br>(${show.hosts.join(", ")})<br><br>${show.time}</td>`;
      } else {
        tableHTML += '<td class="border p-2"></td>'; // Empty cell if no show for this day at this index
      }
    });
    tableHTML += '</tr>';
  }
  return tableHTML;
}
---

<Layout title="Printable Schedule">
  <!-- TODO: make fancy background, light/dark toggle -->
  <main class="flex flex-col items-center p-4 print:bg-white print:text-black">
    <h1 class="text-4xl print:font-semibold">KRNL Typical Schedule</h1>
    <p>Last Updated {last_updated}</p>
    <table class="border m-4 text-center table-fixed">
      <!-- Sunday - Saturday -->
      <thead class="font-bold">
        <th class="border p-2 border-b-2 w-1/7">Sunday</th>
        <th class="border p-2 border-b-2 w-1/7">Monday</th>
        <th class="border p-2 border-b-2 w-1/7">Tuesday</th>
        <th class="border p-2 border-b-2 w-1/7">Wednesday</th>
        <th class="border p-2 border-b-2 w-1/7">Thursday</th>
        <th class="border p-2 border-b-2 w-1/7">Friday</th>
        <th class="border p-2 border-b-2 w-1/7">Saturday</th>
      </thead>

      <!-- and, now, all the shows when they happen -->
      <!-- in the format: Show\n(hosts)\n\ntime -->
      <!-- like: Replay\nVale\n\n3:00p - 4:00p -->
      <!-- make sure that the show is under the right day -->
      <tbody>
        <Fragment set:html={generateScheduleTable(showsDict)} />
      </tbody>
    </table>
    <p>
      Instagram / TikTok / YouTube: @krnl_cornell // Website: <u
        >krnl-radio.github.io</u
      >
    </p>
  </main>
</Layout>
